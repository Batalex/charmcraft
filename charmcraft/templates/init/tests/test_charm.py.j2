# Copyright {{ year }} {{ author }}
# See LICENSE file for licensing details.
#
# Learn more about testing at: https://juju.is/docs/sdk/testing

import unittest
from unittest.mock import Mock

from charm import {{ class_name }}
from ops.model import ActiveStatus
from ops.testing import Harness


class TestCharm(unittest.TestCase):
    def setUp(self):
        self.harness = Harness({{ class_name }})
        self.addCleanup(self.harness.cleanup)
        self.harness.begin()

    def test_config_changed(self):
        self.assertEqual(list(self.harness.charm._stored.things), [])
        self.harness.update_config({"thing": "foo"})
        self.assertEqual(list(self.harness.charm._stored.things), ["foo"])

    def test_action(self):
        # the harness doesn't (yet!) help much with actions themselves
        action_event = Mock(params={"fail": ""})
        self.harness.charm._on_fortune_action(action_event)

        self.assertTrue(action_event.set_results.called)

    def test_action_fail(self):
        action_event = Mock(params={"fail": "fail this"})
        self.harness.charm._on_fortune_action(action_event)

        self.assertEqual(action_event.fail.call_args, [("fail this",)])

    def test_httpbin_pebble_ready(self):
        # Check the initial Pebble plan is empty
        initial_plan = self.harness.get_container_pebble_plan('httpbin')
        self.assertEqual(initial_plan.to_yaml(), '{}\n')
        # Expected plan after Pebble ready with default config
        expected_plan = {
            "summary": "httpbin layer",
            "description": "pebble config layer for httpbin",
            "services": {
                "httpbin": {
                    "override": "replace",
                    "summary": "httpbin",
                    "command": "gunicorn -b 0.0.0.0:80 httpbin:app -k gevent",
                    "startup": "enabled",
                    "environment": {
                        "thing": "üéÅ"
                    },
                }
            },
        }
        # Get the container from model and create a Mock PebbleReadyEvent
        pebble_ready_event = Mock(params={
            "workload": self.harness.model.unit.get_container("httpbin")
        })
        self.harness.charm._on_httpbin_pebble_ready(pebble_ready_event)
        # Check the PebbleReadyEvent handler adds the right layer
        pebble_ready_event.workload.add_layer.assert_called_with(
            "httpbin", expected_plan, combine=True
        )
        # Check that the handler starts the worklaod
        pebble_ready_event.workload.autostart.assert_called_once()
        # Ensure we set an ActiveStatus with no message
        self.assertEqual(self.harness.model.unit.status, ActiveStatus())
