#!/usr/bin/env python3
# Copyright {{ year }} {{ author }}
# See LICENSE file for licensing details.

"""Charm the service.

To gently guide you through the recommended way to write and deploy your new charm,
here are some essential links and instructions to get you up-to-speed.

To ease the development iterations on your computer we suggest you to setup a
microk8s environment [1], in summary it will be:

snap install juju --classic
snap install microk8s --classic
microk8s.enable dns storage
juju bootstrap microk8s micro
juju add-model my-charm-model

At this point you have a controller named "micro" in the "microk8s" cloud. This
cloud is actually your local machine, how neat! In Juju, you interact with the client
(the juju command on your local machine). It connects to a controller. The controller
is hosted on a cloud and controls models.

This charm although simple is fully functional. You can build and deploy it on your
microk8s cloud as following:

charmcraft build
juju deploy ./{{name}}-charm

It may take a while to have the deployment finished, in the meantime you can check
the status by:

juju status

From this point you are ready to start discovering how the Operation Framework
works [2] and some more specifics about config, log, testing among other topics
[3].

If you are curious on how other existing operators are implemented refer to the
MongoDB [4], Elasticsearch[5], or Redis[6] for inspiration on other topics such
as relation management, replication and lifecycle management.

[1] https://juju.is/docs/microk8s-cloud
[2] https://discourse.charmhub.io/t/documentation-operator-framework/3394
[3] https://discourse.charmhub.io/t/first-steps-with-the-operator-framework/3006
[4] https://github.com/canonical/mongodb-operator
[5] https://github.com/canonical/elasticsearch-operator
[6] https://github.com/canonical/redis-operator
"""

import logging

from ops.charm import CharmBase
from ops.main import main
from ops.framework import StoredState

logger = logging.getLogger(__name__)


class {{ class_name }}(CharmBase):
    """Charm the service."""

    _stored = StoredState()

    def __init__(self, *args):
        super().__init__(*args)
        self.framework.observe(self.on.config_changed, self._on_config_changed)
        self.framework.observe(self.on.fortune_action, self._on_fortune_action)
        self._stored.set_default(things=[])

    def _on_config_changed(self, _):
        # Note: you need to uncomment the example in the config.yaml file for this to work (ensure
        # to not just leave the example, but adapt to your configuration needs)
        current = self.config["thing"]
        if current not in self._stored.things:
            logger.debug("found a new thing: %r", current)
            self._stored.things.append(current)

    def _on_fortune_action(self, event):
        # Note: you need to uncomment the example in the actions.yaml file for this to work (ensure
        # to not just leave the example, but adapt to your needs for actions commands)
        fail = event.params["fail"]
        if fail:
            event.fail(fail)
        else:
            event.set_results({"fortune": "A bug in the code is worth two in the documentation."})


if __name__ == "__main__":
    main({{ class_name }})
